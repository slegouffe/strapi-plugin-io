{"version":3,"file":"index.js","sources":["../../server/src/utils/pluginId.js","../../server/src/utils/getService.js","../../server/src/middlewares/handshake.js","../../server/src/utils/constants.js","../../server/src/structures/SocketIO.js","../../server/src/bootstrap/io.js","../../server/src/bootstrap/lifecycle.js","../../server/src/bootstrap/index.js","../../server/src/destroy.js","../../server/src/register.js","../../server/src/config/index.js","../../server/src/content-types/index.js","../../server/src/controllers/controller.js","../../server/src/controllers/index.js","../../server/src/policies/index.js","../../server/src/routes/content-api.js","../../server/src/routes/index.js","../../server/src/services/sanitize.js","../../server/src/services/strategies.js","../../server/src/services/transform.js","../../server/src/services/index.js","../../server/src/index.js"],"sourcesContent":["'use strict';\n\nconst pluginPkg = require('../../package.json');\n\nconst pluginId = pluginPkg.strapi.name;\n\nexport { pluginId };","'use strict';\n\nimport { pluginId } from './pluginId';\n\nconst getService = ({ name, plugin = pluginId, type = 'plugin' }) => {\n\tlet serviceUID = `${type}::${plugin}`;\n\n\tif (name && name.length) {\n\t\tserviceUID += `.${name}`;\n\t}\n\n\tconsole.log('serviceUID', serviceUID);\n\treturn strapi.service(serviceUID);\n}\n\nexport { getService };","'use strict';\n\nimport { getService } from '../utils/getService';\n\n/**\n * Auto assign sockets to appropriate rooms based on tokens associated name.\n * Defaults to default role if no token provided.\n *\n * @param {require('socket.io').Socket} socket The socket attempting to connect\n * @param {Function} next Function to call the next middleware in the stack\n */\nexport const handshake = async (socket, next) => {\n\tconst strategyService = getService({ name: 'strategies' });\n\tconst auth = socket.handshake.auth || {};\n\tlet strategy = auth.strategy || 'jwt';\n\tconst token = auth.token || '';\n\n\t// remove strategy if no token provided\n\tif (!token.length) {\n\t\tstrategy = '';\n\t}\n\n\ttry {\n\t\tlet room;\n\t\tif (strategy && strategy.length) {\n\t\t\tconst strategyType = strategy === 'jwt' ? 'role' : 'token';\n\t\t\tconst ctx = await strategyService[strategyType].authenticate(auth);\n\t\t\troom = strategyService[strategyType].getRoomName(ctx);\n\t\t} else if (strapi.plugin('users-permissions')) {\n\t\t\t// default to public users-permissions role if no supported auth provided\n\t\t\tconst role = await strapi\n\t\t\t\t.query('plugin::users-permissions.role')\n\t\t\t\t.findOne({ where: { type: 'public' }, select: ['id', 'name'] });\n\t\t\troom = strategyService['role'].getRoomName(role);\n\t\t}\n\n\t\tif (room) {\n\t\t\tsocket.join(room.replace(' ', '-'));\n\t\t} else {\n\t\t\tthrow new Error('No valid room found');\n\t\t}\n\n\t\tnext();\n\t} catch (error) {\n\t\tnext(new Error(error.message));\n\t}\n}\n\nexport default handshake;","'use strict';\n\nconst API_TOKEN_TYPE = {\n\tREAD_ONLY: 'read-only',\n\tFULL_ACCESS: 'full-access',\n\tCUSTOM: 'custom',\n};\n\nexport { API_TOKEN_TYPE };","'use strict';\n\nimport { Server } from 'socket.io';\nimport { pluginId } from '../utils/pluginId';\nimport handshake from '../middlewares';\nimport { getService } from '../utils/getService';\nimport { API_TOKEN_TYPE } from '../utils/constants';\n\nclass SocketIO {\n\tconstructor(options) {\n    this._socket = new Server(strapi.server.httpServer, options);\n\t\tconst { hooks } = strapi.config.get(`plugin::${pluginId}`);\n\t\thooks.init?.({ strapi, $io: this });\n\t\tthis._socket.use(handshake);\n\t}\n\n\t// eslint-disable-next-line no-unused-vars\n\tasync emit({ event, schema, data: rawData }) {\n\t\tconst sanitizeService = getService({ name: 'sanitize' });\n\t\tconst strategyService = getService({ name: 'strategy' });\n\t\tconst transformService = getService({ name: 'transform' });\n\n\t\t// account for unsaved single content type being null\n\t\tif (!rawData) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst eventName = `${schema.singularName}:${event}`;\n\n\t\tfor (const strategyType in strategyService) {\n\t\t\tif (Object.hasOwnProperty.call(strategyService, strategyType)) {\n\t\t\t\tconst strategy = strategyService[strategyType];\n\n\t\t\t\tconst rooms = await strategy.getRooms();\n\n\t\t\t\tfor (const room of rooms) {\n\t\t\t\t\tconst permissions = room.permissions.map(({ action }) => ({ action }));\n\t\t\t\t\tconst ability = await strapi.contentAPI.permissions.engine.generateAbility(permissions);\n\n\t\t\t\t\tif (room.type === API_TOKEN_TYPE.FULL_ACCESS || ability.can(schema.uid + '.' + event)) {\n\t\t\t\t\t\t// sanitize\n\t\t\t\t\t\tconst sanitizedData = await sanitizeService.output({\n\t\t\t\t\t\t\tdata: rawData,\n\t\t\t\t\t\t\tschema,\n\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\tauth: {\n\t\t\t\t\t\t\t\t\tname: strategy.name,\n\t\t\t\t\t\t\t\t\tability,\n\t\t\t\t\t\t\t\t\tstrategy: {\n\t\t\t\t\t\t\t\t\t\tverify: strategy.verify,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tcredentials: strategy.credentials?.(room),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tconst roomName = strategy.getRoomName(room);\n\n\t\t\t\t\t\t// transform\n\t\t\t\t\t\tconst data = transformService.response({ data: sanitizedData, schema });\n\t\t\t\t\t\t// emit\n\t\t\t\t\t\tthis._socket.to(roomName.replace(' ', '-')).emit(eventName, { ...data });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tasync raw({ event, data, rooms }) {\n\t\tlet emitter = this._socket;\n\n\t\t// send to all specified rooms\n\t\tif (rooms && rooms.length) {\n\t\t\trooms.forEach((r) => {\n\t\t\t\temitter = emitter.to(r);\n\t\t\t});\n\t\t}\n\n\t\temitter.emit(event, { data });\n\t}\n\n\tget server() {\n\t\treturn this._socket;\n\t}\n}\nexport default SocketIO;","'use strict';\n\nimport { SocketIO } from '../structures';\nimport { pluginId } from '../utils/pluginId';\n\n/**\n * Bootstrap IO instance and related \"services\"\n *\n * @param {*} params\n * @param {*} params.strapi\n */\nexport const bootstrapIO = async ({ strapi }) => {\n\tconst settings = strapi.config.get(`plugin::${pluginId}`);\n\n  // initialize io\n\tconst io = new SocketIO(settings.socket.serverOptions);\n\n\t// // make io avaiable anywhere strapi global object is\n\tstrapi.$io = io;\n\n  // add any io server events\n\tif (settings.events?.length) {\n\t\tstrapi.$io.server.on('connection', (socket) => {\n\t\t\tfor (const event of settings.events) {\n\t\t\t\t// \"connection\" event should be executed immediately\n\t\t\t\tif (event.name === 'connection') {\n\t\t\t\t\tevent.handler({ strapi, io }, socket);\n\t\t\t\t} else {\n\t\t\t\t\t// register all other events to be triggered at a later time\n\t\t\t\t\tsocket.on(event.name, (...args) => event.handler({ strapi, io }, socket, ...args));\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\n","'use strict';\n\nimport { pluginId } from '../utils/pluginId';\n\n/**\n * Bootstrap lifecycles\n *\n * @param {*} params\n * @param {*} params.strapi\n */\nexport const bootstrapLifecycles = async ({ strapi }) => {\n\tstrapi.config.get(`plugin::${pluginId}.contentTypes`, []).forEach((ct) => {\n\t\tconst uid = ct.uid ? ct.uid : ct;\n\n\t\tconst subscriber = {\n\t\t\tmodels: [uid],\n\t\t};\n\n\t\tif (!ct.actions || ct.actions.includes('create')) {\n\t\t\tconst eventType = 'create';\n\t\t\tsubscriber.afterCreate = async (event) => {\n\t\t\t\tstrapi.$io.emit({\n\t\t\t\t\tevent: eventType,\n\t\t\t\t\tschema: event.model,\n\t\t\t\t\tdata: event.result,\n\t\t\t\t});\n\t\t\t};\n\t\t\tsubscriber.afterCreateMany = async (event) => {\n\t\t\t\tconst query = buildEventQuery({ event });\n\t\t\t\tif (query.filters) {\n\t\t\t\t\tconst records = await strapi.entityService.findMany(uid, query);\n\n\t\t\t\t\trecords.forEach((r) => {\n\t\t\t\t\t\tstrapi.$io.emit({\n\t\t\t\t\t\t\tevent: eventType,\n\t\t\t\t\t\t\tschema: event.model,\n\t\t\t\t\t\t\tdata: r,\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tif (!ct.actions || ct.actions.includes('update')) {\n\t\t\tconst eventType = 'update';\n\t\t\tsubscriber.afterUpdate = async (event) => {\n\t\t\t\tstrapi.$io.emit({\n\t\t\t\t\tevent: eventType,\n\t\t\t\t\tschema: event.model,\n\t\t\t\t\tdata: event.result,\n\t\t\t\t});\n\t\t\t};\n\t\t\tsubscriber.beforeUpdateMany = async (event) => {\n\t\t\t\tconst query = buildEventQuery({ event });\n\t\t\t\tif (query.filters) {\n\t\t\t\t\tconst ids = await strapi.entityService.findMany(uid, query);\n\t\t\t\t\tif (!event.state.io) {\n\t\t\t\t\t\tevent.state.io = {};\n\t\t\t\t\t}\n\t\t\t\t\tevent.state.io.ids = ids;\n\t\t\t\t}\n\t\t\t};\n\t\t\tsubscriber.afterUpdateMany = async (event) => {\n\t\t\t\tif (!event.state.io?.ids) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst records = await strapi.entityService.findMany(uid, {\n\t\t\t\t\tfilters: { id: event.state.io.ids },\n\t\t\t\t});\n\n\t\t\t\trecords.forEach((r) => {\n\t\t\t\t\tstrapi.$io.emit({\n\t\t\t\t\t\tevent: eventType,\n\t\t\t\t\t\tschema: event.model,\n\t\t\t\t\t\tdata: r,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t};\n\t\t}\n\n\t\tif (!ct.actions || ct.actions.includes('delete')) {\n\t\t\tconst eventType = 'delete';\n\t\t\tsubscriber.afterDelete = async (event) => {\n\t\t\t\tstrapi.$io.emit({\n\t\t\t\t\tevent: eventType,\n\t\t\t\t\tschema: event.model,\n\t\t\t\t\tdata: event.result,\n\t\t\t\t});\n\t\t\t};\n\t\t\tsubscriber.beforeDeleteMany = async (event) => {\n\t\t\t\tconst query = buildEventQuery({ event });\n\t\t\t\tif (query.filters) {\n\t\t\t\t\tconst records = await strapi.entityService.findMany(uid, query);\n\t\t\t\t\tif (!event.state.io) {\n\t\t\t\t\t\tevent.state.io = {};\n\t\t\t\t\t}\n\t\t\t\t\tevent.state.io.records = records;\n\t\t\t\t}\n\t\t\t};\n\t\t\tsubscriber.afterDeleteMany = async (event) => {\n\t\t\t\tif (!event.state.io?.records) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tevent.state.io.records.forEach((r) => {\n\t\t\t\t\tstrapi.$io.emit({\n\t\t\t\t\t\tevent: eventType,\n\t\t\t\t\t\tschema: event.model,\n\t\t\t\t\t\tdata: r,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t};\n\t\t}\n\n\t\t// setup lifecycles\n\t\tstrapi.db.lifecycles.subscribe(subscriber);\n\t});\n}\n\nfunction buildEventQuery({ event }) {\n\tconst query = {};\n\n\tif (event.params.where) {\n\t\tquery.filters = event.params.where;\n\t}\n\n\tif (event.result?.count) {\n\t\tquery.limit = event.result.count;\n\t} else if (event.params.limit) {\n\t\tquery.limit = event.params.limit;\n\t}\n\n\tif (event.action === 'afterCreateMany') {\n\t\tquery.filters = { id: event.result.ids };\n\t} else if (event.action === 'beforeUpdate') {\n\t\tquery.fields = ['id'];\n\t}\n\n\treturn query;\n}\n\nexport default bootstrapLifecycles;","import { bootstrapIO } from './io';\nimport { bootstrapLifecycles } from './lifecycle';\n\nconst bootstrap = ({ strapi }) => {\n  // bootstrap phase\n  console.log('\\n IO Bootstrap !');\n  bootstrapIO({ strapi });\n  bootstrapLifecycles({ strapi });\n};\n\nexport default bootstrap;\n","const destroy = ({ strapi }) => {\n  // destroy phase\n};\n\nexport default destroy;\n","const register = ({ strapi }) => {\n  // register phase\n};\n\nexport default register;\n","export default {\n  default: {\n    events: [],\n    hooks: {},\n    socket: {\n      serverOptions: { \n        cors: { \n          origin: 'http://localhost:8100', \n          methods: ['GET', 'POST'] \n        } \n      },\n    },\n  },\n  validator() {},\n};\n","export default {};\n","const controller = ({ strapi }) => ({\n  index(ctx) {\n    ctx.body = strapi\n      .plugin('strapi-plugin-io')\n      // the name of the service file & the method.\n      .service('service')\n      .getWelcomeMessage();\n  },\n});\n\nexport default controller;\n","import controller from './controller';\n\nexport default {\n  controller,\n};\n","export default {};\n","export default [\n  {\n    method: 'GET',\n    path: '/',\n    // name of the controller file & the method.\n    handler: 'controller.index',\n    config: {\n      policies: [],\n    },\n  },\n];\n","import contentAPIRoutes from './content-api';\n\nconst routes = {\n  'content-api': {\n    type: 'content-api',\n    routes: contentAPIRoutes,\n  },\n};\n\nexport default routes;\n","'use strict';\n\nconst { sanitize } = require('@strapi/utils');\n\nexport default ({ strapi }) => {\n\t/**\n\t * Sanitize data output with a provided schema for a specified role\n\t *\n\t * @param {Object} param\n\t * @param {Object} param.schema\n\t * @param {Object} param.data\n\t * @param {Object} param.auth\n\t */\n\tfunction output({ schema, data, options }) {\n\t\treturn sanitize.contentAPI.output(data, schema, options);\n\t}\n\n\treturn {\n\t\toutput,\n\t};\n};","'use strict';\n\nimport { castArray, isNil, pipe, every } from 'lodash/fp';\nimport { differenceInHours, parseISO } from 'date-fns';\nimport { getService } from '../utils/getService';\nimport { API_TOKEN_TYPE } from '../utils/constants';\nconst { UnauthorizedError, ForbiddenError } = require('@strapi/utils').errors;\n\nexport default ({ strapi }) => {\n\tconst apiTokenService = getService({ type: 'admin', plugin: 'api-token' });\n\tconst jwtService = getService({ name: 'jwt', plugin: 'users-permissions' });\n\tconst userService = getService({ name: 'user', plugin: 'users-permissions' });\n\tconst role = {\n\t\tname: 'io-role',\n\t\tcredentials: function (role) {\n\t\t\treturn `${this.name}-${role.id}`;\n\t\t},\n\t\tauthenticate: async function (auth) {\n\t\t\t// adapted from https://github.com/strapi/strapi/blob/main/packages/plugins/users-permissions/server/strategies/users-permissions.js#L12\n\t\t\tconst token = await jwtService.verify(auth.token);\n\n\t\t\tif (!token) {\n\t\t\t\tthrow new UnauthorizedError('Invalid credentials');\n\t\t\t}\n\n\t\t\tconst { id } = token;\n\n\t\t\t// Invalid token\n\t\t\tif (id === undefined) {\n\t\t\t\tthrow new UnauthorizedError('Invalid credentials');\n\t\t\t}\n\n\t\t\tconst user = await userService.fetchAuthenticatedUser(id);\n\n\t\t\t// No user associated to the token\n\t\t\tif (!user) {\n\t\t\t\tthrow new UnauthorizedError('Invalid credentials');\n\t\t\t}\n\n\t\t\tconst advancedSettings = await strapi\n\t\t\t\t.store({ type: 'plugin', name: 'users-permissions' })\n\t\t\t\t.get({ key: 'advanced' });\n\n\t\t\t// User not confirmed\n\t\t\tif (advancedSettings.email_confirmation && !user.confirmed) {\n\t\t\t\tthrow new UnauthorizedError('Invalid credentials');\n\t\t\t}\n\n\t\t\t// User blocked\n\t\t\tif (user.blocked) {\n\t\t\t\tthrow new UnauthorizedError('Invalid credentials');\n\t\t\t}\n\n\t\t\treturn strapi.entityService.findOne('plugin::users-permissions.role', user.role.id, {\n\t\t\t\tfields: ['id', 'name'],\n\t\t\t});\n\t\t},\n\t\tverify: function (auth, config) {\n\t\t\t// adapted from https://github.com/strapi/strapi/blob/main/packages/plugins/users-permissions/server/strategies/users-permissions.js#L80\n\t\t\tconst { ability } = auth;\n\n\t\t\tif (!ability) {\n\t\t\t\tthrow new UnauthorizedError();\n\t\t\t}\n\n\t\t\tconst isAllowed = pipe(\n\t\t\t\tcastArray,\n\t\t\t\tevery((scope) => ability.can(scope)),\n\t\t\t)(config.scope);\n\n\t\t\tif (!isAllowed) {\n\t\t\t\tthrow new ForbiddenError();\n\t\t\t}\n\t\t},\n\t\tgetRoomName: function (role) {\n\t\t\tconsole.log('role', role);\n\t\t\treturn `${this.name}-${role.name.toLowerCase()}`;\n\t\t},\n\t\tgetRooms: function () {\n\t\t\t// fetch all role types\n\t\t\treturn strapi.entityService.findMany('plugin::users-permissions.role', {\n\t\t\t\tfields: ['id', 'name'],\n\t\t\t\tpopulate: { permissions: true },\n\t\t\t});\n\t\t},\n\t};\n\n\tconst token = {\n\t\tname: 'io-token',\n\t\tcredentials: function (token) {\n\t\t\treturn token;\n\t\t},\n\t\tauthenticate: async function (auth) {\n\t\t\t// adapted from https://github.com/strapi/strapi/blob/main/packages/core/admin/server/strategies/api-token.js#L30\n\t\t\tconst token = auth.token;\n\n\t\t\tif (!token) {\n\t\t\t\tthrow new UnauthorizedError('Invalid credentials');\n\t\t\t}\n\n\t\t\tconst apiToken = await strapi.query('admin::api-token').findOne({\n\t\t\t\twhere: { accessKey: apiTokenService.hash(token) },\n\t\t\t\tselect: ['id', 'name', 'type', 'lastUsedAt', 'expiresAt'],\n\t\t\t\tpopulate: ['permissions'],\n\t\t\t});\n\n\t\t\t// token not found\n\t\t\tif (!apiToken) {\n\t\t\t\tthrow new UnauthorizedError('Invalid credentials');\n\t\t\t}\n\n\t\t\tconst currentDate = new Date();\n\t\t\tif (!isNil(apiToken.expiresAt)) {\n\t\t\t\tconst expirationDate = new Date(apiToken.expiresAt);\n\t\t\t\t// token has expired\n\t\t\t\tif (expirationDate < currentDate) {\n\t\t\t\t\tthrow new UnauthorizedError('Token expired');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// update lastUsedAt if the token has not been used in the last hour\n\t\t\tif (!apiToken.lastUsedAt || differenceInHours(currentDate, parseISO(apiToken.lastUsedAt)) >= 1) {\n\t\t\t\tawait strapi.query('admin::api-token').update({\n\t\t\t\t\twhere: { id: apiToken.id },\n\t\t\t\t\tdata: { lastUsedAt: currentDate },\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn apiToken;\n\t\t},\n\t\tverify: function (auth, config) {\n\t\t\t// adapted from https://github.com/strapi/strapi/blob/main/packages/core/admin/server/strategies/api-token.js#L82\n\t\t\tconst { credentials: apiToken, ability } = auth;\n\t\t\tif (!apiToken) {\n\t\t\t\tthrow new UnauthorizedError('Token not found');\n\t\t\t}\n\n\t\t\tif (!isNil(apiToken.expiresAt)) {\n\t\t\t\tconst currentDate = new Date();\n\t\t\t\tconst expirationDate = new Date(apiToken.expiresAt);\n\t\t\t\t// token has expired\n\t\t\t\tif (expirationDate < currentDate) {\n\t\t\t\t\tthrow new UnauthorizedError('Token expired');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (apiToken.type === API_TOKEN_TYPE.FULL_ACCESS) {\n\t\t\t\treturn;\n\t\t\t} else if (apiToken.type === API_TOKEN_TYPE.READ_ONLY) {\n\t\t\t\tconst scopes = castArray(config.scope);\n\n\t\t\t\tif (config.scope && scopes.every(isReadScope)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else if (apiToken.type === API_TOKEN_TYPE.CUSTOM) {\n\t\t\t\tif (!ability) {\n\t\t\t\t\tthrow new ForbiddenError();\n\t\t\t\t}\n\n\t\t\t\tconst scopes = castArray(config.scope);\n\n\t\t\t\tconst isAllowed = scopes.every((scope) => ability.can(scope));\n\n\t\t\t\tif (isAllowed) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthrow new ForbiddenError();\n\t\t},\n\t\tgetRoomName: function (token) {\n\t\t\treturn `${this.name}-${token.name.toLowerCase()}`;\n\t\t},\n\t\tgetRooms: function () {\n\t\t\t// fetch active token types\n\t\t\treturn strapi.entityService.findMany('admin::api-token', {\n\t\t\t\tfields: ['id', 'type', 'name'],\n\t\t\t\tfilters: {\n\t\t\t\t\t$or: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\texpiresAt: {\n\t\t\t\t\t\t\t\t$gte: new Date(),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\texpiresAt: null,\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\tpopulate: { permissions: true },\n\t\t\t});\n\t\t},\n\t};\n\n\treturn {\n\t\trole,\n\t\ttoken,\n\t};\n};","'use strict';\n\nconst { isNil, isPlainObject } = require('lodash/fp');\n\nexport default ({ strapi }) => {\n\t/**\n\t * Transform query response data to API format\n\t *\n\t * @param {Object} param\n\t * @param {String} param.resource\n\t * @param {Object} param.contentType\n\t */\n\tfunction response({ data, schema }) {\n\t\treturn transformResponse(data, {}, { contentType: schema });\n\t}\n\n\treturn {\n\t\tresponse,\n\t};\n};\n\n// adapted from https://github.com/strapi/strapi/blob/main/packages/core/strapi/src/core-api/controller/transform.ts\nfunction isEntry(property) {\n\treturn property === null || isPlainObject(property) || Array.isArray(property);\n}\n\nfunction isDZEntries(property) {\n\treturn Array.isArray(property);\n}\n\nfunction transformResponse(resource, meta = {}, opts = {}) {\n\tif (isNil(resource)) {\n\t\treturn resource;\n\t}\n\n\treturn {\n\t\tdata: transformEntry(resource, opts?.contentType),\n\t\tmeta,\n\t};\n}\n\nfunction transformComponent(data, component) {\n\tif (Array.isArray(data)) {\n\t\treturn data.map((datum) => transformComponent(datum, component));\n\t}\n\n\tconst res = transformEntry(data, component);\n\n\tif (isNil(res)) {\n\t\treturn res;\n\t}\n\n\tconst { id, attributes } = res;\n\treturn { id, ...attributes };\n}\n\nfunction transformEntry(entry, type) {\n\tif (isNil(entry)) {\n\t\treturn entry;\n\t}\n\n\tif (Array.isArray(entry)) {\n\t\treturn entry.map((singleEntry) => transformEntry(singleEntry, type));\n\t}\n\n\tif (!isPlainObject(entry)) {\n\t\tthrow new Error('Entry must be an object');\n\t}\n\n\tconst { id, ...properties } = entry;\n\n\tconst attributeValues = {};\n\n\tfor (const key of Object.keys(properties)) {\n\t\tconst property = properties[key];\n\t\tconst attribute = type && type.attributes[key];\n\n\t\tif (attribute && attribute.type === 'relation' && isEntry(property) && 'target' in attribute) {\n\t\t\tconst data = transformEntry(property, strapi.contentType(attribute.target));\n\n\t\t\tattributeValues[key] = { data };\n\t\t} else if (attribute && attribute.type === 'component' && isEntry(property)) {\n\t\t\tattributeValues[key] = transformComponent(property, strapi.components[attribute.component]);\n\t\t} else if (attribute && attribute.type === 'dynamiczone' && isDZEntries(property)) {\n\t\t\tif (isNil(property)) {\n\t\t\t\tattributeValues[key] = property;\n\t\t\t}\n\n\t\t\tattributeValues[key] = property.map((subProperty) => {\n\t\t\t\treturn transformComponent(subProperty, strapi.components[subProperty.__component]);\n\t\t\t});\n\t\t} else if (attribute && attribute.type === 'media' && isEntry(property)) {\n\t\t\tconst data = transformEntry(property, strapi.contentType('plugin::upload.file'));\n\n\t\t\tattributeValues[key] = { data };\n\t\t} else {\n\t\t\tattributeValues[key] = property;\n\t\t}\n\t}\n\n\treturn {\n\t\tid,\n\t\tattributes: attributeValues,\n\t\t// NOTE: not necessary for now\n\t\t// meta: {},\n\t};\n}","import sanitize from './sanitize';\nimport strategies from './strategies';\nimport transform from './transform';\n\nexport default {\n  sanitize,\n  strategies,\n  transform,\n};\n","/**\n * Application methods\n */\nimport bootstrap from './bootstrap';\nimport destroy from './destroy';\nimport register from './register';\n\n/**\n * Plugin server methods\n */\nimport config from './config';\nimport contentTypes from './content-types';\nimport controllers from './controllers';\nimport middlewares from './middlewares';\nimport policies from './policies';\nimport routes from './routes';\nimport services from './services';\n\nexport default {\n  bootstrap,\n  destroy,\n  register,\n\n  config,\n  controllers,\n  contentTypes,\n  middlewares,\n  policies,\n  routes,\n  services,\n};\n"],"names":["Server","strapi","role","token","config","pipe","castArray","every","isNil","differenceInHours","parseISO","sanitize","middlewares"],"mappings":"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"}